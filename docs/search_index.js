var documenterSearchIndex = {"docs":
[{"location":"ec.html#Elliptic-Curve-Arithmetic","page":"Elliptic Curves","title":"Elliptic Curve Arithmetic","text":"","category":"section"},{"location":"ec.html#Types","page":"Elliptic Curves","title":"Types","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"EC{D,R}\r\n\r\nAbstractECPoint\r\n\r\nECPointAffine{D,R}\r\n\r\nECPointJacobian{D,R}\r\n\r\nECPointLD{D,R}\r\n\r\nECMismatchException","category":"page"},{"location":"ec.html#BinaryECC.EC","page":"Elliptic Curves","title":"BinaryECC.EC","text":"EC{D,R}\n\nRepresents a non-supersingular elliptic curve over the field given by D and R.\n\nContains fields a and b, where:\n\ny^2 + xy = x^3 + ax^2 + b\n\n\n\n\n\n","category":"type"},{"location":"ec.html#BinaryECC.AbstractECPoint","page":"Elliptic Curves","title":"BinaryECC.AbstractECPoint","text":"AbstractECPoint\n\nAbstract type for points on an elliptic curve.\n\n\n\n\n\n","category":"type"},{"location":"ec.html#BinaryECC.ECPointAffine","page":"Elliptic Curves","title":"BinaryECC.ECPointAffine","text":"ECPointAffine{D,R} <: AbstractECPoint\n\nRepresents a point on an elliptic curve over the field represented by D and R. Contains fields x, y, and the elliptic field (\"ec\") that it is on.\n\nE y^2 +  xy = x^3 + ax^2 + b\n\n\n\n\n\n","category":"type"},{"location":"ec.html#BinaryECC.ECPointJacobian","page":"Elliptic Curves","title":"BinaryECC.ECPointJacobian","text":"ECPointJacobian{D,R} <: AbstractECPoint\n\nRepresents a point on an elliptic curve over the field represented by D and R. Contains fields x, y, z, and the elliptic field (\"ec\") that it is on.\n\nE y^2 +  xyz = x^3 + ax^2z^2 + bz^6\n\nEach point (x y) on the curve is represented by a set of equivalent Jacobian points, (lambda^2 x lambda^3 y lambda)  lambda in K^*  (where K^* is the binary field that the curve is based on).\n\n\n\n\n\n","category":"type"},{"location":"ec.html#BinaryECC.ECPointLD","page":"Elliptic Curves","title":"BinaryECC.ECPointLD","text":"ECPointLD{D,R} <: AbstractECPoint\n\nRepresents a point on an elliptic curve over the field represented by D and R. Contains fields x, y, z, and the elliptic field (\"ec\") that it is on.\n\nE y^2 +  xyz = x^3z + ax^2z^2 + bz^4\n\nEach (affine) point (x y) is represented by a set of Lopez-Dahab points, (lambda x lambda^2 y lambda)  lambda in K^*  (where K^* is the binary field that the curve is based on).\n\n\n\n\n\n","category":"type"},{"location":"ec.html#BinaryECC.ECMismatchException","page":"Elliptic Curves","title":"BinaryECC.ECMismatchException","text":"ECMismatchException <: Exception\n\nIndicates that an operation has been attempted on several points that are not on the same curve.\n\n\n\n\n\n","category":"type"},{"location":"ec.html#Curve-Functions","page":"Elliptic Curves","title":"Curve Functions","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"==(ec1::EC{D,R}, ec2::EC{D,R}) where {D,R}\r\n\r\nrepr(ec::EC)","category":"page"},{"location":"ec.html#Base.:==-Union{Tuple{R}, Tuple{D}, Tuple{EC{D,R},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:==","text":"==(ec1::EC{D,R}, ec2::EC{D,R}) where {D,R}\n\nTwo elliptic curves are equal if they have the same a and b values, and defined over the same field.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.repr-Tuple{EC}","page":"Elliptic Curves","title":"Base.repr","text":"repr(ec::EC)\n\nReturns a string representation of an elliptic curve equation,  \"y^2 + xy = x^3 + ax^2 + b\".\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Point-Arithmetic","page":"Elliptic Curves","title":"Point Arithmetic","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"==(p1::ECPointAffine{D,R}, p2::ECPointAffine{D,R}) where {D,R}\r\n\r\n+(p1::ECPointAffine{D,R}, p2::ECPointAffine{D,R}) where {D,R}\r\n\r\n-(p::ECPointAffine) where {D,R}\r\n\r\n-(p1::AbstractECPoint, p2::AbstractECPoint)\r\n\r\n*(p::ECPointAffine, n::Integer) where {D,R}","category":"page"},{"location":"ec.html#Base.:==-Union{Tuple{R}, Tuple{D}, Tuple{ECPointAffine{D,R},ECPointAffine{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:==","text":"==(p1::ECPointAffine{D,R}, p2::ECPointAffine{D,R}) where {D,R}\n\nTwo points are equal iff they have the same x and y coordinate,  and are on the same elliptic curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{ECPointAffine{D,R},ECPointAffine{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:+","text":"+(p1::ECPointAffine{D,R}, p2::ECPointAffine{D,R}) where {D,R}\n\nReturns p_1+p_2.\n\nIf the points are not on the same curve, this will throw an ECMismatchException.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:--Union{Tuple{R}, Tuple{D}, Tuple{ECPointAffine}} where R where D","page":"Elliptic Curves","title":"Base.:-","text":"-(p::ECPointAffine) where {D,R}\n\nReturns additive inverse of the given point, -p.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:--Tuple{AbstractECPoint,AbstractECPoint}","page":"Elliptic Curves","title":"Base.:-","text":"-(p1::AbstractECPoint, p2::AbstractECPoint)\n\nReturns p_1-p_2.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:*-Union{Tuple{R}, Tuple{D}, Tuple{ECPointAffine,Integer}} where R where D","page":"Elliptic Curves","title":"Base.:*","text":"*(p::ECPointAffine{D,R}, n::Integer) where {D,R}\n\nReturns the result of the scalar multiplication p cdot n, using a double and add method.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Scalar-Point-Multiplication","page":"Elliptic Curves","title":"Scalar Point Multiplication","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"mult_mont_general\r\n\r\nmult_mont_affine\r\n\r\nmult_naf(p::ECPointAffine{D,R}, n::Integer) where {D,R}","category":"page"},{"location":"ec.html#BinaryECC.mult_mont_general","page":"Elliptic Curves","title":"BinaryECC.mult_mont_general","text":"mult_mont_general(p::AbstractECPoint, n::Integer)\n\nPerforms p cdot n with a fixed sequence of curve and field operations. More resistant to timing attacks than the standard double and add algorithm.\n\n\n\n\n\n","category":"function"},{"location":"ec.html#BinaryECC.mult_mont_affine","page":"Elliptic Curves","title":"BinaryECC.mult_mont_affine","text":"mult_mont_affine(p::ECPointAffine{D,R}, n::Integer) where {D,R}\n\nReturns p cdot n.\n\nMore resistant to timing attacks than the standard double and add algorithm.\n\nFast Multiplication on Elliptic Curves over GF(2^m) without Precomputation, Algorithm 2A: Montgomery Scalar Multiplication.\n\n\n\n\n\n","category":"function"},{"location":"ec.html#BinaryECC.mult_naf-Union{Tuple{R}, Tuple{D}, Tuple{ECPointAffine{D,R},Integer}} where R where D","page":"Elliptic Curves","title":"BinaryECC.mult_naf","text":"mult_naf(p::ECPointAffine{D,R}, n::Integer) where {D,R}\n\nReturns p cdot n.\n\nUses the binary NAF multiplication method described in Guide to Elliptic Curve Cryptography, algorithm 3.31.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Additive-Identity","page":"Elliptic Curves","title":"Additive Identity","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"iszero(p::ECPointAffine)\r\nzero(::Type{ECPointAffine{D,R}}, ec::EC{D,R}) where {D,R}\r\nzero(::Type{ECPointAffine}, ec::EC{D,R}) where {D,R}\r\n\r\niszero(p::ECPointJacobian)\r\nzero(::Type{ECPointJacobian{D,R}}, ec::EC{D,R}) where {D,R}\r\nzero(::Type{ECPointJacobian}, ec::EC{D,R}) where {D,R}\r\n\r\niszero(p::ECPointLD)\r\nzero(::Type{ECPointLD{D,R}}, ec::EC{D,R}) where {D,R}\r\nzero(::Type{ECPointLD}, ec::EC{D,R}) where {D,R}","category":"page"},{"location":"ec.html#Base.iszero-Tuple{ECPointAffine}","page":"Elliptic Curves","title":"Base.iszero","text":"iszero(p::ECPointAffine)\n\nReturns true if p = mathcalO, i.e it is the point at infinity.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointAffine{D,R}},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointAffine{D,R}}, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointAffine},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointAffine, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.iszero-Tuple{ECPointJacobian}","page":"Elliptic Curves","title":"Base.iszero","text":"iszero(p::ECPointJacobian)\n\nReturns true if p = mathcalO, i.e it is the point at infinity.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian{D,R}},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointJacobian{D,R}}, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointJacobian}, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.iszero-Tuple{ECPointLD}","page":"Elliptic Curves","title":"Base.iszero","text":"iszero(p::ECPointLD)\n\nReturns true if p = mathcalO, i.e it is the point at infinity.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD{D,R}},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointLD{D,R}}, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD},EC{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.zero","text":"zero(::Type{ECPointLD}, ec::EC{D,R}) where {D,R}\n\nReturns an object representing the point at infinity on the given curve.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Mixed-Representation-Functions","page":"Elliptic Curves","title":"Mixed Representation Functions","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"+(::Type{ECPointJacobian{D,R}}, p1::ECPointLD{D,R}, p2::ECPointJacobian{D,R}) where {D,R}\r\n+(::Type{ECPointJacobian{D,R}}, p1::ECPointJacobian{D,R}, p2::ECPointLD{D,R}) where {D,R}\r\n\r\n+(::Type{ECPointLD{D,R}}, p1::ECPointLD{D,R}, p2::ECPointJacobian{D,R}) where {D,R}\r\n+(::Type{ECPointLD{D,R}}, p1::ECPointJacobian{D,R}, p2::ECPointLD{D,R}) where {D,R}\r\n\r\nconvert(::Type{ECPointAffine}, p::ECPointJacobian{D,R}) where {D,R}\r\nconvert(::Type{ECPointAffine}, p::ECPointLD{D,R}) where {D,R}\r\nconvert(::Type{ECPointJacobian}, p::ECPointAffine{D,R}) where {D,R}\r\nconvert(::Type{ECPointJacobian}, p::ECPointLD{D,R}) where {D,R}\r\nconvert(::Type{ECPointLD}, p::ECPointAffine{D,R}) where {D,R}\r\nconvert(::Type{ECPointLD}, p::ECPointJacobian{D,R}) where {D,R}","category":"page"},{"location":"ec.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian{D,R}},ECPointLD{D,R},ECPointJacobian{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:+","text":"+(::Type{ECPointJacobian{D,R}}, p1::ECPointLD{D,R}, p2::ECPointJacobian{D,R}) where {D,R}\n\nReturns p_1 +p_2 in Jacobian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian{D,R}},ECPointJacobian{D,R},ECPointLD{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:+","text":"+(::Type{ECPointJacobian{D,R}}, p1::ECPointJacobian{D,R}, p2::ECPointLD{D,R}) where {D,R}\n\nReturns p_1 +p_2 in Jacobian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD{D,R}},ECPointLD{D,R},ECPointJacobian{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:+","text":"+(::Type{ECPointLD{D,R}}, p1::ECPointLD{D,R}, p2::ECPointJacobian{D,R}) where {D,R}\n\nReturns p_1 +p_2 in Lopez-Dahab coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD{D,R}},ECPointJacobian{D,R},ECPointLD{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.:+","text":"+(::Type{ECPointLD{D,R}}, p1::ECPointJacobian{D,R}, p2::ECPointLD{D,R}) where {D,R}\n\nReturns p_1 +p_2 in Lopez-Dahab coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointAffine},ECPointJacobian{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointAffine}, p::ECPointJacobian{D,R}) where {D,R}\n\nConverts a point from Jacobian coordinates to affine coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointAffine},ECPointLD{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointAffine}, p::ECPointLD{D,R}) where {D,R}\n\nConverts a point from Lopez-Dahab coordinates to affine coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian},ECPointAffine{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointJacobian}, p::ECPointAffine{D,R}) where {D,R}\n\nConverts a point from affine coordinates to Jacobian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointJacobian},ECPointLD{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointJacobian}, p::ECPointLD{D,R}) where {D,R}\n\nConverts a point from Lopez-Dahab coordinates to Jacobian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD},ECPointAffine{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointLD}, p::ECPointAffine{D,R}) where {D,R}\n\nConverts a point from affine coordinates to Lopez-Dahab coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.convert-Union{Tuple{R}, Tuple{D}, Tuple{Type{ECPointLD},ECPointJacobian{D,R}}} where R where D","page":"Elliptic Curves","title":"Base.convert","text":"convert(::Type{ECPointLD}, p::ECPointJacobian{D,R}) where {D,R}\n\nConverts a point from Jacobian coordinates to Lopez-Dahab coordinates.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Miscellaneous-Point-Functions","page":"Elliptic Curves","title":"Miscellaneous Point Functions","text":"","category":"section"},{"location":"ec.html","page":"Elliptic Curves","title":"Elliptic Curves","text":"ECPointAffine(s::String, ec::EC{D,R}) where {D,R}\r\n\r\nECPointAffine(ec::EC{D,R}) where {D,R}\r\n\r\nisvalid(p::ECPointAffine)\r\n\r\nrepr(p::ECPointAffine)\r\n\r\nrepr(p::ECPointJacobian)\r\n\r\nrepr(p::ECPointLD)","category":"page"},{"location":"ec.html#BinaryECC.ECPointAffine-Union{Tuple{R}, Tuple{D}, Tuple{String,EC{D,R}}} where R where D","page":"Elliptic Curves","title":"BinaryECC.ECPointAffine","text":"ECPointAffine(s::String, ec::EC{D,R}) where {D,R}\n\nConvert a hex string to a point on the given elliptic curve using the procedure in SEC 2 (version 2), section 2.3.4.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#BinaryECC.ECPointAffine-Union{Tuple{R}, Tuple{D}, Tuple{EC{D,R}}} where R where D","page":"Elliptic Curves","title":"BinaryECC.ECPointAffine","text":"ECPointAffine(s::String, ec::EC{D,R}) where {D,R}\n\nConvert a hex string to a point on the given elliptic curve using the procedure in SEC 2 (version 2), section 2.3.4.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.isvalid-Tuple{ECPointAffine}","page":"Elliptic Curves","title":"Base.isvalid","text":"isvalid(p::ECPointAffine)\n\nReturns true if p is a point on the elliptic curve that it is associated with.\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.repr-Tuple{ECPointAffine}","page":"Elliptic Curves","title":"Base.repr","text":"repr(p::ECPointAffine)\n\nReturns a string representation of an elliptic curve point, \"(x y)\".\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.repr-Tuple{ECPointJacobian}","page":"Elliptic Curves","title":"Base.repr","text":"repr(p::ECPointJacobian)\n\nReturns a string representation of an elliptic curve point, \"(x y z)\".\n\n\n\n\n\n","category":"method"},{"location":"ec.html#Base.repr-Tuple{ECPointLD}","page":"Elliptic Curves","title":"Base.repr","text":"repr(p::ECPointLD)\n\nReturns a string representation of an elliptic curve point, \"(x y z)\".\n\n\n\n\n\n","category":"method"},{"location":"field.html#Binary-Field-Arithmetic","page":"Binary Fields","title":"Binary Field Arithmetic","text":"","category":"section"},{"location":"field.html#Types","page":"Binary Fields","title":"Types","text":"","category":"section"},{"location":"field.html","page":"Binary Fields","title":"Binary Fields","text":"BFieldPoint{D,R}\r\n\r\nBFieldPoint{D,R}(s::String) where {D,R}","category":"page"},{"location":"field.html#BinaryECC.BFieldPoint","page":"Binary Fields","title":"BinaryECC.BFieldPoint","text":"BFieldPoint{D,R}\n\nRepresents a point in the binary field which has order 2^D and reduction polynomial\n\nx^D + x^r_n + cdots + x^r_0\n\nwhere R = r_n r_n-1ldots r_1 r_0 in binary.\n\nTypes for points in the standard fields (taken from SEC 2, table 3)  are available:\n\nBFieldPoint113\nBFieldPoint131\nBFieldPoint163\nBFieldPoint193\nBFieldPoint233\nBFieldPoint239\nBFieldPoint283\nBFieldPoint409\nBFieldPoint571\n\n\n\n\n\n","category":"type"},{"location":"field.html#BinaryECC.BFieldPoint-Union{Tuple{R}, Tuple{D}, Tuple{String}} where R where D","page":"Binary Fields","title":"BinaryECC.BFieldPoint","text":"BFieldPoint{D,R}(s::String) where {D,R}\n\nUsing the procedure set out in SEC 1 (version 2) 2.3.6, this converts a hex string to a field element.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Arithmetic","page":"Binary Fields","title":"Arithmetic","text":"","category":"section"},{"location":"field.html#General-Arithmetic","page":"Binary Fields","title":"General Arithmetic","text":"","category":"section"},{"location":"field.html","page":"Binary Fields","title":"Binary Fields","text":"==(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\n+(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\n-(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\n*(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\ninv(a::BFieldPoint{D,R}) where {D,R}\r\n\r\n/(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\n^(a::BFieldPoint{D,R}, b::Integer) where {D,R}\r\n\r\nsqrt(a::BFieldPoint{D,R}) where {D,R}","category":"page"},{"location":"field.html#Base.:==-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.:==","text":"==(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns true if the points a and b from the same field are equal,  and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.:+-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.:+","text":"+(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the result of a+b.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.:--Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.:-","text":"-(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the result of a-b.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.:*-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.:*","text":"*(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the  result of a cdot b.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.inv-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.inv","text":"inv(a::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element b such that a b  1 pmodf_R(x)  (where f_R(x) is the reduction polynomial for the field).\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.:/-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.:/","text":"/(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the result of fracab.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.:^-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},Integer}} where R where D","page":"Binary Fields","title":"Base.:^","text":"^(a::BFieldPoint{D,R}, b::Integer) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the result of a^b.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.sqrt-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.sqrt","text":"sqrt(a::BFieldPoint{D,R}) where {D,R}\n\nReturns b such that b^2  a pmod(R).\n\n\n\n\n\n","category":"method"},{"location":"field.html#Multiplication","page":"Binary Fields","title":"Multiplication","text":"","category":"section"},{"location":"field.html","page":"Binary Fields","title":"Binary Fields","text":"mult_shiftandadd(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}, w=0) where {D,R}\r\n\r\nmult_threaded(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\nmult_ownreduce(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\nmult_comb_rtl(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\nmult_comb_ltr(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\r\n\r\nmult_comb_window(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}, window::Int) where {D,R}\r\n\r\nsquare(a::BFieldPoint{D,R}) where {D,R}\r\n\r\nsquare_window(a::BFieldPoint{D,R}, window::Int) where {D,R}","category":"page"},{"location":"field.html#BinaryECC.mult_shiftandadd-Union{Tuple{D}, Tuple{R}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R},Any}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_shiftandadd","text":"mult_shiftandadd(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a cdot b using the right to left shift and add method.\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.mult_threaded-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_threaded","text":"mult_threaded(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a cdot b using the right to left shift and add method with multithreading.\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.mult_ownreduce-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_ownreduce","text":"mult_ownreduce(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a cdot b using the right to left shift and add method, without needing to call a reduction function.\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.mult_comb_rtl-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_comb_rtl","text":"mult_comb_rtl(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a cdot b using a right to left comb method (described in Guide to Elliptic Curve Cryptography, algorithm 2.34).\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.mult_comb_ltr-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_comb_ltr","text":"mult_comb_ltr(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}) where {D,R}\n\nReturns a cdot b using a left to right comb method (described in Guide to Elliptic Curve Cryptography, algorithm 2.35).\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.mult_comb_window-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},BFieldPoint{D,R},Int64}} where R where D","page":"Binary Fields","title":"BinaryECC.mult_comb_window","text":"mult_comb_window(a::BFieldPoint{D,R}, b::BFieldPoint{D,R}, window::Int) where {D,R}\n\nReturns a cdot b using a left to right comb method windowing (described in Guide to Elliptic Curve Cryptography, algorithm 2.36).\n\nPerforms best with a window size of 4.\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.square-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"BinaryECC.square","text":"square(a::BFieldPoint{D,R}) where {D,R}\n\nReturns a new element (of the binary field represented by {D,R}) which is the result of a^2.\n\n\n\n\n\n","category":"method"},{"location":"field.html#BinaryECC.square_window-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R},Int64}} where R where D","page":"Binary Fields","title":"BinaryECC.square_window","text":"square_window(a::BFieldPoint{D,R}, window::Int) where {D,R}\n\nReturns a^2 by inserting a zero between every bit in the original, using the specified window size.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Miscellaneous-Arithmetic","page":"Binary Fields","title":"Miscellaneous Arithmetic","text":"","category":"section"},{"location":"field.html","page":"Binary Fields","title":"Binary Fields","text":"iszero(a::BFieldPoint)\r\n\r\nzero(::Type{BFieldPoint{D,R}}) where {D,R}\r\n\r\nisone(a::BFieldPoint)\r\n\r\none(::Type{BFieldPoint{D,R}}) where {D,R}\r\n\r\nreduce(a::BFieldPoint{D,R}) where {D,R}","category":"page"},{"location":"field.html#Base.iszero-Tuple{BFieldPoint}","page":"Binary Fields","title":"Base.iszero","text":"iszero(a::BFieldPoint)\n\nReturns true if a is the zero element of the field represented by D and R,  and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.zero-Union{Tuple{R}, Tuple{D}, Tuple{Type{BFieldPoint{D,R}}}} where R where D","page":"Binary Fields","title":"Base.zero","text":"zero(::Type{BFieldPoint{D,R}}) where {D,R}\n\nReturns the zero element of the specified field.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.isone-Tuple{BFieldPoint}","page":"Binary Fields","title":"Base.isone","text":"isone(a::BFieldPoint)\n\nReturns true if a is equal to one, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.one-Union{Tuple{R}, Tuple{D}, Tuple{Type{BFieldPoint{D,R}}}} where R where D","page":"Binary Fields","title":"Base.one","text":"one(::Type{BFieldPoint{D,R}}) where {D,R}\n\nReturns element 1 of the specified field.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.reduce-Union{Tuple{R}, Tuple{D}, Tuple{BFieldPoint{D,R}}} where R where D","page":"Binary Fields","title":"Base.reduce","text":"reduce(a::BFieldPoint{D,R}) where {D,R}\n\nReturns the least element b, such that a equiv b pmodR.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Miscellaneous-Functions","page":"Binary Fields","title":"Miscellaneous Functions","text":"","category":"section"},{"location":"field.html","page":"Binary Fields","title":"Binary Fields","text":"random(::Type{BFieldPoint{D,R}}) where {D,R}\r\n\r\nconvert(::Type{BigInt}, a::BFieldPoint)","category":"page"},{"location":"field.html#BinaryECC.random-Union{Tuple{R}, Tuple{D}, Tuple{Type{BFieldPoint{D,R}}}} where R where D","page":"Binary Fields","title":"BinaryECC.random","text":"random(::Type{BFieldPoint{D,R}}) where {D,R}\n\nReturns a random element of the specified field.\n\n\n\n\n\n","category":"method"},{"location":"field.html#Base.convert-Tuple{Type{BigInt},BFieldPoint}","page":"Binary Fields","title":"Base.convert","text":"convert(::Type{BigInt}, a::BFieldPoint)\n\nConverts the given field point to a number (of type BigInt), following the procedure  set out in SEC 1 (version 2) 2.3.9.\n\n\n\n\n\n","category":"method"},{"location":"index.html#BinaryECC.jl","page":"Home","title":"BinaryECC.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Elliptic curve cryptography using binary fields.","category":"page"},{"location":"index.html#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Finite binary field arithmetic\nElliptic curve arithmetic\nCryptographic primitives","category":"page"},{"location":"crypto.html#Cryptographic-Primitives","page":"Cryptographic Primitives","title":"Cryptographic Primitives","text":"","category":"section"},{"location":"crypto.html#Curve-Domain-Parameters","page":"Cryptographic Primitives","title":"Curve Domain Parameters","text":"","category":"section"},{"location":"crypto.html","page":"Cryptographic Primitives","title":"Cryptographic Primitives","text":"CurveDomainParams{D,R}\r\n\r\nisvalid(T::CurveDomainParams{D,R}, t::Int) where {D,R}","category":"page"},{"location":"crypto.html#BinaryECC.CurveDomainParams","page":"Cryptographic Primitives","title":"BinaryECC.CurveDomainParams","text":"CurveDomainParams{D,R}\n\nRepresents the elliptic curve domain  parameters over mathbbF_2^m described in SEC 1 (version 2), 3.1.2.\n\nIt contains three fields:\n\nG, a generating point, in affine coordinates\nn, the order of G (i.e. the smallest n satisfying G cdot n = mathcalO)\nh, the cofactor, h = E(mathbbF_2^m)  n\n\nThe other elements of the septuple described in 3.1.2 are accessible through the fields of G.\n\nSeveral standard curves domain parameters (taken from SEC 2, section 3) are available:\n\nSECT163K1\nSECT163R1\nSECT233K1\nSECT233R1\nSECT283K1\nSECT283R1\nSECT409K1\nSECT409R1\nSECT571K1\nSECT571R1\n\n\n\n\n\n","category":"type"},{"location":"crypto.html#Base.isvalid-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},Int64}} where R where D","page":"Cryptographic Primitives","title":"Base.isvalid","text":"isvalid(T::CurveDomainParams{D,R}, t::Int) where {D,R}\n\nReturns true if the curve domain parameters T meet the security level t,  using the procedure in SEC 1 (version 2) 3.1.2.2.1, and false otherwise.\n\nNote: does not currently perform step 6 (checking that n is prime).\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#Elliptic-Curve-Key-Pairs","page":"Cryptographic Primitives","title":"Elliptic Curve Key Pairs","text":"","category":"section"},{"location":"crypto.html","page":"Cryptographic Primitives","title":"Cryptographic Primitives","text":"ECKeyPair{D,R}\r\n\r\ngenerate_keypair(T::CurveDomainParams{D,R}) where {D,R}\r\n\r\nisvalid(T::CurveDomainParams{D,R}, Q::ECPointAffine{D,R}) where {D,R}","category":"page"},{"location":"crypto.html#BinaryECC.ECKeyPair","page":"Cryptographic Primitives","title":"BinaryECC.ECKeyPair","text":"ECKeyPair{D,R}\n\nRepresents an elliptic curve key pair (described in SEC 1, version 2, 3.2) with  fields d and Q (where Q = d cdot G, and G is the generator of   the curve domain paramters used to generate this key pair).\n\n\n\n\n\n","category":"type"},{"location":"crypto.html#BinaryECC.generate_keypair-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R}}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.generate_keypair","text":"generate_keypair(T::CurveDomainParams{D,R}) where {D,R}\n\nGnerates a new random ECKeyPair associated with T, as described in SEC 1 (version 2)  3.2.1.\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#Base.isvalid-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},ECPointAffine{D,R}}} where R where D","page":"Cryptographic Primitives","title":"Base.isvalid","text":"isvalid(T::CurveDomainParams{D,R}, Q::ECPointAffine{D,R}) where {D,R}\n\nReturns true if Q is a valid public key associated with the curve domain  parameters T, using the procedure in SEC 1 (version 2) 3.2.2.1, and false  otherwise.\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#ECDSA","page":"Cryptographic Primitives","title":"ECDSA","text":"","category":"section"},{"location":"crypto.html","page":"Cryptographic Primitives","title":"Cryptographic Primitives","text":"ECDSASignature\r\n\r\necdsa_sign(T::CurveDomainParams{D,R}, U::ECKeyPair{D,R}, M::String) where {D,R}\r\n\r\necdsa_verify(T::CurveDomainParams{D,R}, Q::ECPointAffine{D,R}, sig::ECDSASignature, M::String) where {D,R}","category":"page"},{"location":"crypto.html#BinaryECC.ECDSASignature","page":"Cryptographic Primitives","title":"BinaryECC.ECDSASignature","text":"ECDSASignature\n\nRepresents a signature produced by ECDSA (Elliptic Curve DSA), with the fields  r and s (both integers).\n\n\n\n\n\n","category":"type"},{"location":"crypto.html#BinaryECC.ecdsa_sign-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},ECKeyPair{D,R},String}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.ecdsa_sign","text":"ecdsa_sign(T::CurveDomainParams{D,R}, U::ECKeyPair{D,R}, M::String) where {D,R}\n\nCreates an ECDSASignature using the key pair U (associated with the curve  domain parameters T) for the message M (a string).\n\nThis follows the signing  procedure described in SEC 1 (version 2) 4.1.3.\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#BinaryECC.ecdsa_verify-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},ECPointAffine{D,R},ECDSASignature,String}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.ecdsa_verify","text":"ecdsa_verify(T::CurveDomainParams{D,R}, Q::ECPointAffine{D,R}, sig::ECDSASignature, M::String) where {D,R}\n\nReturns true if textitsig is valid signature for message M and  public key Q (associated with curve domain parameters T), following the  verifying operation described in SEC 1 (version 2) 4.1.4, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#ECDH","page":"Cryptographic Primitives","title":"ECDH","text":"","category":"section"},{"location":"crypto.html","page":"Cryptographic Primitives","title":"Cryptographic Primitives","text":"ecdh_calculate(T::CurveDomainParams{D,R}, dU::PFieldPoint, QV::ECPointAffine{D,R}) where {D,R}\r\n\r\necdh_deployment1(T::CurveDomainParams)\r\n\r\necdh_deployment2(T::CurveDomainParams{D,R}, QV::ECPointAffine{D,R}) where {D,R}\r\n\r\necdh_agreement(T::CurveDomainParams{D,R}, ukey::ECKeyPair{D,R}, QV::ECPointAffine{D,R}) where {D,R}","category":"page"},{"location":"crypto.html#BinaryECC.ecdh_calculate-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},PFieldPoint,ECPointAffine{D,R}}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.ecdh_calculate","text":"ecdh_calculate(T::CurveDomainParams{D,R}, dU::PFieldPoint, QV::ECPointAffine{D,R}) where {D,R}\n\nCalculates the shared secret value for entity \"U\"'s private key  (textitdU) and entity \"V\"'s public key (textitQV), which are  associated with curve domain parameters T.\n\nThis follows the procedure described in SEC 1 (version 2) 3.3.1.\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#BinaryECC.ecdh_deployment1-Tuple{CurveDomainParams}","page":"Cryptographic Primitives","title":"BinaryECC.ecdh_deployment1","text":"ecdh_deployment1(T::CurveDomainParams)\n\nPerforms the first stage of the ECDH deployment operation (described in SEC 1,  version 2, 6.1.2) from the perspective of entity \"U\".\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#BinaryECC.ecdh_deployment2-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},ECPointAffine{D,R}}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.ecdh_deployment2","text":"ecdh_deployment2(T::CurveDomainParams{D,R}, QV::ECPointAffine{D,R}) where {D,R}\n\nPerforms the second stage of the ECDH deployment operation (described in SEC 1,  version 2, 6.1.2) from the perspective of entity \"U\", using entity \"V\"'s  public key (textitQV).\n\n\n\n\n\n","category":"method"},{"location":"crypto.html#BinaryECC.ecdh_agreement-Union{Tuple{R}, Tuple{D}, Tuple{CurveDomainParams{D,R},ECKeyPair{D,R},ECPointAffine{D,R}}} where R where D","page":"Cryptographic Primitives","title":"BinaryECC.ecdh_agreement","text":"ecdh_agreement(T::CurveDomainParams{D,R}, ukey::ECKeyPair{D,R}, QV::ECPointAffine{D,R}) where {D,R}\n\nThis performs the ECDH key agreement operation as described in SEC 1 (version 2) 6.1.3.\n\nIt is performed from the perspective of entity \"U\", using their ECKeyPair textitukey and the public key of entity \"V\" (textitQV).\n\n\n\n\n\n","category":"method"}]
}
